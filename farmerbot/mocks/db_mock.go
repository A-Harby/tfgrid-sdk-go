// Code generated by MockGen. DO NOT EDIT.
// Source: farmerbot/models/db.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/threefoldtech/tfgrid-sdk-go/farmerbot/models"
)

// MockRedisManager is a mock of RedisManager interface.
type MockRedisManager struct {
	ctrl     *gomock.Controller
	recorder *MockRedisManagerMockRecorder
}

// MockRedisManagerMockRecorder is the mock recorder for MockRedisManager.
type MockRedisManagerMockRecorder struct {
	mock *MockRedisManager
}

// NewMockRedisManager creates a new mock instance.
func NewMockRedisManager(ctrl *gomock.Controller) *MockRedisManager {
	mock := &MockRedisManager{ctrl: ctrl}
	mock.recorder = &MockRedisManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisManager) EXPECT() *MockRedisManagerMockRecorder {
	return m.recorder
}

// FilterAllowedNodesToShutDown mocks base method.
func (m *MockRedisManager) FilterAllowedNodesToShutDown() ([]models.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterAllowedNodesToShutDown")
	ret0, _ := ret[0].([]models.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterAllowedNodesToShutDown indicates an expected call of FilterAllowedNodesToShutDown.
func (mr *MockRedisManagerMockRecorder) FilterAllowedNodesToShutDown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterAllowedNodesToShutDown", reflect.TypeOf((*MockRedisManager)(nil).FilterAllowedNodesToShutDown))
}

// FilterNodesPower mocks base method.
func (m *MockRedisManager) FilterNodesPower(states []models.PowerState) ([]models.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterNodesPower", states)
	ret0, _ := ret[0].([]models.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterNodesPower indicates an expected call of FilterNodesPower.
func (mr *MockRedisManagerMockRecorder) FilterNodesPower(states interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterNodesPower", reflect.TypeOf((*MockRedisManager)(nil).FilterNodesPower), states)
}

// GetCPUOverProvision mocks base method.
func (m *MockRedisManager) GetCPUOverProvision() (uint8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCPUOverProvision")
	ret0, _ := ret[0].(uint8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCPUOverProvision indicates an expected call of GetCPUOverProvision.
func (mr *MockRedisManagerMockRecorder) GetCPUOverProvision() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCPUOverProvision", reflect.TypeOf((*MockRedisManager)(nil).GetCPUOverProvision))
}

// GetFarm mocks base method.
func (m *MockRedisManager) GetFarm() (models.Farm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFarm")
	ret0, _ := ret[0].(models.Farm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFarm indicates an expected call of GetFarm.
func (mr *MockRedisManagerMockRecorder) GetFarm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFarm", reflect.TypeOf((*MockRedisManager)(nil).GetFarm))
}

// GetNode mocks base method.
func (m *MockRedisManager) GetNode(nodeID uint32) (models.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", nodeID)
	ret0, _ := ret[0].(models.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockRedisManagerMockRecorder) GetNode(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockRedisManager)(nil).GetNode), nodeID)
}

// GetNodeByTwinID mocks base method.
func (m *MockRedisManager) GetNodeByTwinID(twinID uint32) (models.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeByTwinID", twinID)
	ret0, _ := ret[0].(models.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeByTwinID indicates an expected call of GetNodeByTwinID.
func (mr *MockRedisManagerMockRecorder) GetNodeByTwinID(twinID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeByTwinID", reflect.TypeOf((*MockRedisManager)(nil).GetNodeByTwinID), twinID)
}

// GetNodes mocks base method.
func (m *MockRedisManager) GetNodes() ([]models.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodes")
	ret0, _ := ret[0].([]models.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodes indicates an expected call of GetNodes.
func (mr *MockRedisManagerMockRecorder) GetNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockRedisManager)(nil).GetNodes))
}

// GetPower mocks base method.
func (m *MockRedisManager) GetPower() (models.Power, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPower")
	ret0, _ := ret[0].(models.Power)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPower indicates an expected call of GetPower.
func (mr *MockRedisManagerMockRecorder) GetPower() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPower", reflect.TypeOf((*MockRedisManager)(nil).GetPower))
}

// Save mocks base method.
func (m *MockRedisManager) Save(config models.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRedisManagerMockRecorder) Save(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRedisManager)(nil).Save), config)
}

// SetCPUOverProvision mocks base method.
func (m *MockRedisManager) SetCPUOverProvision(cpuOP uint8) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCPUOverProvision", cpuOP)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCPUOverProvision indicates an expected call of SetCPUOverProvision.
func (mr *MockRedisManagerMockRecorder) SetCPUOverProvision(cpuOP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCPUOverProvision", reflect.TypeOf((*MockRedisManager)(nil).SetCPUOverProvision), cpuOP)
}

// SetFarm mocks base method.
func (m *MockRedisManager) SetFarm(farm models.Farm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFarm", farm)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFarm indicates an expected call of SetFarm.
func (mr *MockRedisManagerMockRecorder) SetFarm(farm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFarm", reflect.TypeOf((*MockRedisManager)(nil).SetFarm), farm)
}

// SetNodes mocks base method.
func (m *MockRedisManager) SetNodes(nodes []models.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNodes", nodes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNodes indicates an expected call of SetNodes.
func (mr *MockRedisManagerMockRecorder) SetNodes(nodes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNodes", reflect.TypeOf((*MockRedisManager)(nil).SetNodes), nodes)
}

// SetPower mocks base method.
func (m *MockRedisManager) SetPower(power models.Power) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPower", power)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPower indicates an expected call of SetPower.
func (mr *MockRedisManagerMockRecorder) SetPower(power interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPower", reflect.TypeOf((*MockRedisManager)(nil).SetPower), power)
}

// UpdatesNode mocks base method.
func (m *MockRedisManager) UpdatesNode(node models.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatesNode", node)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatesNode indicates an expected call of UpdatesNode.
func (mr *MockRedisManagerMockRecorder) UpdatesNode(node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatesNode", reflect.TypeOf((*MockRedisManager)(nil).UpdatesNode), node)
}
